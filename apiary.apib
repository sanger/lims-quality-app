HOST: http://www.google.com/

--- Lims-quality-app ---

---
Welcome to our API documentation for lims-quality-app. 

S2 API provides a JSON RESTful interface. The path to the root URL `/` only is needed to interact with the API.
All the other actions are embedded in every JSON response.
Please note that all URLs are to be considered unstable. As a consequence, you should only refer to the actions
elements returned in the response.

Please find below the different actions available in the JSON:

* `create` creates a new resource using a HTTP POST request
* `read`, `first` and `last` actions are used for pagination through HTTP GET requests
* `update` action update a resource using a HTTP PUT request
* `delete` action delete a resource using a HTTP DELETE request

In top of the above actions, more specific actions are available to interact between multiple resources.
These actions use generally HTTP POST request and are listed under the root JSON response.

Please note you will generally find two different URLs to create a new resource, which produce an identical result:
`/resources` or `/actions/create_resource`.
---


--
Root
--

GET /
> Accept: application/json
< 200
< Content-Type: application/json
{
    "actions": {
        "read": "http://example.org/"
    },
    "gel_images": {
        "actions": {
            "create": "http://example.org/gel_images",
            "read": "http://example.org/gel_images",
            "first": "http://example.org/gel_images/page=1",
            "last": "http://example.org/gel_images/page=-1"
        }
    },
    "uuid_resources": {
        "actions": {
            "create": "http://example.org/uuid_resources",
            "read": "http://example.org/uuid_resources",
            "first": "http://example.org/uuid_resources/page=1",
            "last": "http://example.org/uuid_resources/page=-1"
        }
    },
    "searches": {
        "actions": {
            "create": "http://example.org/searches",
            "read": "http://example.org/searches",
            "first": "http://example.org/searches/page=1",
            "last": "http://example.org/searches/page=-1"
        }
    },
    "multi_criteria_filters": {
        "actions": {
            "create": "http://example.org/multi_criteria_filters",
            "read": "http://example.org/multi_criteria_filters",
            "first": "http://example.org/multi_criteria_filters/page=1",
            "last": "http://example.org/multi_criteria_filters/page=-1"
        }
    },
    "create_gel_images": {
        "actions": {
            "create": "http://example.org/actions/create_gel_image"
        }
    },
    "update_gel_image_scores": {
        "actions": {
            "create": "http://example.org/actions/update_gel_image_score"
        }
    },
    "create_searches": {
        "actions": {
            "create": "http://example.org/actions/create_search"
        }
    },
    "revision": 3
}


--
Gel Image
--
**Create a new gel image**

* `gel_uuid` (mandatory)
* `image` the encoded image (mandatory)
* `scores` hash mapping a gel position to a score. Valid scores are `pass`, `fail`, `degraded` and `partially degraded`.

See the example below to know the list of available parameters for a sample.

POST /gel_images
> Accept: application/json
{
    "gel_image": {
        "gel_uuid": "11111111-2222-3333-4444-666666666666",
        "image": "encoded image",
        "scores": {
            "A1": "pass",
            "B2": "fail"
        }
    }
}
< 200
< Content-Type: application/json
{
    "actions": {
        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "gel_uuid": "11111111-2222-3333-4444-666666666666",
    "image": "encoded image",
    "scores": {
        "A1": "pass",
        "B2": "fail"
    }
}


**Update gel image scores**

* `scores` hash mapping a gel position to a score. Valid scores are `pass`, `fail`, `degraded` and `partially degraded`.

Note that the uuid is the uuid of the gel image resource and not the gel resource uuid.

PUT /11111111-2222-3333-4444-555555555555
> Accept: application/json
{
    "scores": {
        "A1": "pass",
        "B2": "fail",
        "C3": "degraded",
        "D4": "partially degraded"
    }
}
< 200
< Content-Type: application/json
{
    "actions": {
        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "gel_uuid": "11111111-2222-3333-4444-666666666666",
    "image": "encoded image",
    "scores": {
        "A1": "pass",
        "B2": "fail",
        "C3": "degraded",
        "D4": "partially degraded"
    }
}


**Update gel image scores by gel uuid**

* `gel_uuid` the gel uuid associated to the gel image to update
* `scores` hash mapping a gel position to a score. Valid scores are `pass`, `fail`, `degraded` and `partially degraded`.

POST /actions/update_gel_image_score
> Accept: application/json
{
    "update_gel_image_score": {
        "gel_uuid": "11111111-2222-3333-4444-666666666666",
        "scores": {
            "A1": "pass",
            "B2": "fail",
            "C3": "degraded",
            "D4": "partially degraded"
        }
    }
}
< 200
< Content-Type: application/json
{
    "actions": {
        "read": "http://example.org/11111111-2222-3333-4444-555555555555",
        "create": "http://example.org/11111111-2222-3333-4444-555555555555",
        "update": "http://example.org/11111111-2222-3333-4444-555555555555",
        "delete": "http://example.org/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "gel_uuid": "11111111-2222-3333-4444-666666666666",
    "image": "encoded image",
    "scores": {
        "A1": "pass",
        "B2": "fail",
        "C3": "degraded",
        "D4": "partially degraded"
    }
}